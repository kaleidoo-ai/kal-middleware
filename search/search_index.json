{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to kal_middleware","text":"<p>Kaleidoo middleware package</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://BarLanderK.github.io/kal_middleware</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v2057-date","title":"v2.0.5.7 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/BarLanderK/kal-middleware/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>kal-middleware could always use more documentation, whether as part of the official kal-middleware docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/BarLanderK/kal-middleware/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up kal-middleware for local development.</p> <ol> <li> <p>Fork the kal-middleware repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/kal-middleware.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv kal-middleware\n$ cd kal-middleware/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 kal-middleware tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/BarLanderK/kal-middleware/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"firebaseApi/","title":"firebaseApi module","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install kal-middleware, run this command in your terminal:</p> <pre><code>pip install kal-middleware\n</code></pre> <p>This is the preferred method to install kal-middleware, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install kal-middleware from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/BarLanderK/kal-middleware\n</code></pre>"},{"location":"jwt/","title":"jwt module","text":""},{"location":"kal_middleware/","title":"kal_middleware module","text":"<p>Main module.</p>"},{"location":"keycloakAuth/","title":"keycloakAuth module","text":""},{"location":"keycloakConfig/","title":"keycloakConfig module","text":""},{"location":"keycloakSchemas/","title":"keycloakSchemas module","text":""},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations","title":"<code> AuthConfigurations            (BaseModel)         </code>","text":"Source code in <code>kal_middleware/keycloakSchemas.py</code> <pre><code>class AuthConfigurations(BaseModel):\n    server_url: str\n    realm: str\n    client_id: str\n    client_secret: str\n    authorization_url: str\n    token_url: str\n</code></pre>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__class_vars__","title":"<code>__class_vars__</code>  <code>special</code>","text":"<p>The names of the class variables defined on the model.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__private_attributes__","title":"<code>__private_attributes__</code>  <code>special</code>","text":"<p>Metadata about the private attributes of the model.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__pydantic_complete__","title":"<code>__pydantic_complete__</code>  <code>special</code>","text":"<p>Whether model building is completed, or if there are still undefined fields.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__pydantic_computed_fields__","title":"<code>__pydantic_computed_fields__</code>  <code>special</code>","text":"<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__pydantic_custom_init__","title":"<code>__pydantic_custom_init__</code>  <code>special</code>","text":"<p>Whether the model has a custom <code>__init__</code> method.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__pydantic_decorators__","title":"<code>__pydantic_decorators__</code>  <code>special</code>","text":"<p>Metadata containing the decorators defined on the model. This replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__pydantic_fields__","title":"<code>__pydantic_fields__</code>  <code>special</code>","text":"<p>A dictionary of field names and their corresponding <code>FieldInfo</code> objects. This replaces <code>Model.__fields__</code> from Pydantic V1.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__pydantic_generic_metadata__","title":"<code>__pydantic_generic_metadata__</code>  <code>special</code>","text":"<p>Metadata for generic models; contains data used for a similar purpose to args, origin, parameters in typing-module generics. May eventually be replaced by these.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__pydantic_parent_namespace__","title":"<code>__pydantic_parent_namespace__</code>  <code>special</code>","text":"<p>Parent namespace of the model, used for automatic rebuilding of models.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__pydantic_post_init__","title":"<code>__pydantic_post_init__</code>  <code>special</code>","text":"<p>The name of the post-init method for the model, if defined.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.__signature__","title":"<code>__signature__</code>  <code>special</code>","text":"<p>The synthesized <code>__init__</code> <code>Signature</code> of the model.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.AuthConfigurations.model_config","title":"<code>model_config</code>","text":"<p>Configuration for the model, should be a dictionary conforming to <code>ConfigDict</code>.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload","title":"<code> UserPayload            (BaseModel)         </code>","text":"Source code in <code>kal_middleware/keycloakSchemas.py</code> <pre><code>class UserPayload(BaseModel):\n    id: str\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    realm_roles: list\n</code></pre>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__class_vars__","title":"<code>__class_vars__</code>  <code>special</code>","text":"<p>The names of the class variables defined on the model.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__private_attributes__","title":"<code>__private_attributes__</code>  <code>special</code>","text":"<p>Metadata about the private attributes of the model.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__pydantic_complete__","title":"<code>__pydantic_complete__</code>  <code>special</code>","text":"<p>Whether model building is completed, or if there are still undefined fields.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__pydantic_computed_fields__","title":"<code>__pydantic_computed_fields__</code>  <code>special</code>","text":"<p>A dictionary of computed field names and their corresponding <code>ComputedFieldInfo</code> objects.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__pydantic_custom_init__","title":"<code>__pydantic_custom_init__</code>  <code>special</code>","text":"<p>Whether the model has a custom <code>__init__</code> method.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__pydantic_decorators__","title":"<code>__pydantic_decorators__</code>  <code>special</code>","text":"<p>Metadata containing the decorators defined on the model. This replaces <code>Model.__validators__</code> and <code>Model.__root_validators__</code> from Pydantic V1.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__pydantic_fields__","title":"<code>__pydantic_fields__</code>  <code>special</code>","text":"<p>A dictionary of field names and their corresponding <code>FieldInfo</code> objects. This replaces <code>Model.__fields__</code> from Pydantic V1.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__pydantic_generic_metadata__","title":"<code>__pydantic_generic_metadata__</code>  <code>special</code>","text":"<p>Metadata for generic models; contains data used for a similar purpose to args, origin, parameters in typing-module generics. May eventually be replaced by these.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__pydantic_parent_namespace__","title":"<code>__pydantic_parent_namespace__</code>  <code>special</code>","text":"<p>Parent namespace of the model, used for automatic rebuilding of models.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__pydantic_post_init__","title":"<code>__pydantic_post_init__</code>  <code>special</code>","text":"<p>The name of the post-init method for the model, if defined.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.__signature__","title":"<code>__signature__</code>  <code>special</code>","text":"<p>The synthesized <code>__init__</code> <code>Signature</code> of the model.</p>"},{"location":"keycloakSchemas/#kal_middleware.keycloakSchemas.UserPayload.model_config","title":"<code>model_config</code>","text":"<p>Configuration for the model, should be a dictionary conforming to <code>ConfigDict</code>.</p>"},{"location":"sts/","title":"sts module","text":""},{"location":"usage/","title":"Usage","text":"<p>To use kal-middleware in a project:</p> <pre><code>import kal_middleware\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}